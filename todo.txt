Ordered by priority

tech :
 - abstract service with LOGGER & getClass
 - spring security, default user in dev mode. Used to find the user's shelter
 - attach domains to player (team, dweller, ...) if neccesasry
 - generation map : Add spot to cities
 - throw functionnals exceptions (buy room without enough money, ...) and manage display with angular
 - i18n messages
 - DBUnit (see http://blog.netapsys.fr/realiser-ses-tests-dintegration-avec-spring-test-dbunit/)
 - create VM, add jenkins & sonar
 - integration test 
 - metrics
 - mock angular service for rest call
 - run test with jenkins & selenium, record jvm JMX data ? (proc, memory, network)
 
game : 
 - create missions "type", and percent success / reward with dwellers stats. Mission unlock with exploring (find dwellers, find food, find tech, ...)
 - building with resources capacity to limit food, water, ...
 - improve notion of "room size" => cells uses & dwellers capacity...
 - water & food use to "create" and train dwellers
 - money/water/food use to build room
 - power use by room
 - resources : update the new values if necessary (build, sell, all actions from player)
 - improve perf ... example : get citis list instead of world object, and get each city one by one
 
blog : 
 - mockito any()
 - findOne vs getOne
 - eclipse replace regex <bean:write name="([a-zA-Z]+)" property="([a-zA-Z]+)" *\/> => \${$1.$2}
 - generate text with csv like data
 - example for each spring mvc / data / other good thing
